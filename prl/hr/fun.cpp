#include <iostream>
#include <cmath>


double Calcula_Iapp(double time,double stim_period) {
	double stim_amplitude = -40.0;
	double stim_duration = 1.0;
	double stim_offset = 0.0;
	double past;
	double Iapp;
	past = floor(time/stim_period)*stim_period;
	if((time-past >= stim_offset) && (time-past <= stim_offset+stim_duration)) Iapp = stim_amplitude;
	else Iapp = 0.0;
	return Iapp;

}



void f(double t, double *rop, double *op, double *p) {
	int nvar = 27;
	double x[nvar];
	for(int i=0; i<nvar; ++i) x[i] = op[i];

	double stimper=p[0];    /**/
	double Iapp;
	Iapp=Calcula_Iapp(t,stimper);

  double  u = 11.3 ;
  double  csr = 90.0;
  double  s = (1-u)*csr-50 ;
  double  PCa = 0.00054;
  double  eq34 = 0.341;
  double  eq48P1 = 3.2;
  double  eq48P2 = 0.32;
  double  eq48P3 = 47.13;
  double  eq57P1 = 0.13 ;
  double  eq57P2 = 10.66 ;
  double  eq58P1 = 0.3 ;
  double  eq58P2 = 2.535;
  double  eq58P3 = 32.0;
  double  eq59P1 = 0.135 ;
  double  eq59P2 = 80.0;
  double  eq59P3 = 6.8;
  double  eq60P1 = 3.56;
  double  eq60P2 = 0.079;
  double  eq60P3 = 3.1;
  double  eq60P4 = 0.35;
  double  eq61P1 = 1.2714;
  double  eq61P2 = 0.2444;
  double  eq61P3 = 3.474;
  double  eq61P4 = 0.04391 ;
  double  eq61P5 = 37.78 ;
  double  eq61P6 = 0.311 ;
  double  eq61P7 = 79.23 ;
  double  eq62P1 = 0.1212 ;
  double  eq62P2 = 0.01052 ;
  double  eq62P3 = 0.1378;
  double  eq62P4 = 40.14;

  double  eq73P1 = 0.001381;
  double  eq73P2 = 7.0;
  double  eq73P3 = 0.123;
  double  eq73P4 = 0.000611;
  double  eq73P5 = 10.0;
  double  eq73P6 = 0.145;

  double  F = 96.5;
  double  R = 8.315;
  double  T = 308.0;
  double  Ca2m0 = 1.8 ;
  double  a = (F*x[0])/(R*T);
  double  csmM = x[20]/1000.;
  // Añadimos los posibles parámetros
  double eq92P1=20.;
  double eq89P1=3.;
  //double KmNao=87.5;
  double kj=50.;
  double eq57P3 = 11.1;

  //double eq92P1=p[1];
  //double eq89P1=p[1];
  double KmNao=p[1];
  //double kj=p[1];
  //double  eq57P3 = p[1];


    double   iCa;
    double   alfam;
    double   alfah;
    double   alfaj;
    double   betah;
    double   betaj;
    double   Q;
    double   xkrv1;
    double   xkrv2;
    double   tauKr;
    double   tauxs1;



    if(fabs(a) < 0.001)
      iCa = ((4*PCa*F*(csmM*exp(2*a) - eq34*Ca2m0))/2.);
    else
      iCa = ((4*PCa*x[0]*F*F*(csmM*exp(2*a) - eq34*Ca2m0))/(R*T*(exp(2*a) - 1.0)));


    if(fabs(eq48P3 + x[0]) < 0.001)
      alfam = eq48P1;
    else
      alfam = eq48P2*(x[0] + eq48P3)/(1.0 - exp(-0.1*(x[0] + eq48P3)));


    if(x[0] < -40)
      alfah = eq59P1*exp((x[0] + eq59P2)/(-1.0*eq59P3));
    else
      alfah = 0.0;

    if(x[0] < -40)
      alfaj = (-eq61P1*pow(10,5)*exp(eq61P2*x[0]) - (eq61P3*exp(-eq61P4*x[0]))/pow(10,5))*(x[0] + eq61P5)/(1.0 + exp(eq61P6*(x[0] + eq61P7)));
    else
      alfaj = 0.0;

    if(x[0] < -40)
      betah = eq60P1*exp(eq60P2*x[0]) + eq60P3*pow(10,5)*exp(eq60P4*x[0]);
    else
      betah =1.0/(eq57P1*(1.0 + exp((x[0] + eq57P2)/(-1.0*eq57P3))));

    if(x[0] < -40)
      betaj = eq62P1*exp(-eq62P2*x[0])/(1.0 + exp(-eq62P3*(x[0] + eq62P4)));
    else
      betaj =eq58P1*exp((-eq58P2*x[0])/pow(10,7))/(1.0 + exp(-0.1*(x[0] + eq58P3)));

    if(0 < x[22] && x[22] < 50.)
      Q = 0.0;
    else if(50. <= x[22] && x[22] <= csr)
      Q = x[22] - 50;
    else
      Q = u*x[22] + s;


    if(fabs(x[0] + eq73P2) - 0.001)
      xkrv1 = eq73P1/eq73P3;
    else
      xkrv1 = (eq73P1*(x[0]+ eq73P2))/(1 - exp(-eq73P3*(x[0] + eq73P2)));

    if(fabs(x[0] + eq73P5) - 0.001)
      xkrv2 = eq73P4/eq73P6;
    else
      xkrv2 =(eq73P4*(x[0] + eq73P5))/(-1 + exp(eq73P6*(x[0] + eq73P5)));

    tauKr = 1.0/(xkrv1 + xkrv2);

  // Ecuaciones diferenciales.

  rop[6] = 2.857142857142857*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))))*x[5] - x[6]*(2.857142857142857/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))) + 1/((1.0 + exp((-40 - x[0])/10.))*(671.082 + (1.*(-661.082 + 4954.*exp(0.06410256410256411*x[0])))/(1. + exp(2.*(30 + x[0]))))) + 1/((1.0 + exp((-40 - x[0])/10.))*(1.0 + 125.87955495161302/pow(x[4],3))*(10. + 190./(1.0 + 0.00390625*pow(x[4],4)) + (1.*(0. + 4954.*exp(0.06410256410256411*x[0]) - 190./(1.0 + 0.00390625*pow(x[4],4))))/(1. + exp(2.*(30 + x[0])))))) + ((1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))*x[10])/(671.082 + (1.*(-661.082 + 4954.*exp(0.06410256410256411*x[0])))/(1. + exp(2.*(30 + x[0])))) + ((1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))*x[9])/(10. + 190./(1.0 + 0.00390625*pow(x[4],4)) + (1.*(0. + 4954.*exp(0.06410256410256411*x[0]) - 190./(1.0 + 0.00390625*pow(x[4],4))))/(1. + exp(2.*(30 + x[0]))));

   rop[5] = (2.857142857142857*x[6])/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))) - x[5]*(0.41413 + 2.857142857142857*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0])))) + 0.0298/(1.0 + 125.87955495161302/pow(x[4],3))) + 0.01067698536585366*x[8] + 0.0002015911477370905*x[7] + 2.7*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]);

   rop[7] = (0.0298*x[5])/(1.0 + 125.87955495161302/pow(x[4],3)) - (0.0005785911477370905 + (0.3333333333333333*exp(0.1*(-50. - x[0])))/(1.0 + exp(0.1*(-50. - x[0]))))*x[7] + (0.367*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]))/(1.0 + 125.87955495161302/pow(x[4],3)) + (49.2746504240757*exp(0.1*(-50. - x[0]))*(1.0 + exp((-40 - x[0])/10.))*(1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))*x[9])/((1.0 + exp(0.1*(-50. - x[0])))*(1.0 + exp(0.14705882352941177*(4.36 - x[0])))*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0])))));

   rop[9] = x[6]/((1.0 + exp((-40 - x[0])/10.))*(1.0 + 125.87955495161302/pow(x[4],3))*(10. + 190./(1.0 + 0.00390625*pow(x[4],4)) + (1.*(0. + 4954.*exp(0.06410256410256411*x[0]) - 190./(1.0 + 0.00390625*pow(x[4],4))))/(1. + exp(2.*(30 + x[0]))))) + (0.3333333333333333*exp(0.1*(-50. - x[0]))*x[7])/(1.0 + exp(0.1*(-50. - x[0]))) - ((49.2746504240757*exp(0.1*(-50. - x[0]))*(1.0 + exp((-40 - x[0])/10.))*(1.0 - 1/(1.0 + exp((-40 - x[0])/10.))))/((1.0 + exp(0.1*(-50. - x[0])))*(1.0 + exp(0.14705882352941177*(4.36 - x[0])))*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))))) + (1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))/(10. + 190./(1.0 + 0.00390625*pow(x[4],4)) + (1.*(0. + 4954.*exp(0.06410256410256411*x[0]) - 190./(1.0 + 0.00390625*pow(x[4],4))))/(1. + exp(2.*(30 + x[0])))))*x[9];

   rop[8] = 0.00413*x[5] - (0.01136398536585366 + (0.3333333333333333*exp(0.1*(-50. - x[0])))/(1.0 + exp(0.1*(-50. - x[0]))))*x[8] + (0.128937768433159*exp(0.1*(-50. - x[0]))*(1.0 + exp((-40 - x[0])/10.))*(1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))*x[10])/((1.0 + exp(0.1*(-50. - x[0])))*(1.0 + exp(0.14705882352941177*(4.36 - x[0])))*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))))) + 0.00175*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]);

   rop[10] = x[6]/((1.0 + exp((-40 - x[0])/10.))*(671.082 + (1.*(-661.082 + 4954.*exp(0.06410256410256411*x[0])))/(1. + exp(2.*(30 + x[0]))))) + (0.3333333333333333*exp(0.1*(-50. - x[0]))*x[8])/(1.0 + exp(0.1*(-50. - x[0]))) - ((0.128937768433159*exp(0.1*(-50. - x[0]))*(1.0 + exp((-40 - x[0])/10.))*(1.0 - 1/(1.0 + exp((-40 - x[0])/10.))))/((1.0 + exp(0.1*(-50. - x[0])))*(1.0 + exp(0.14705882352941177*(4.36 - x[0])))*(1.0 - 1/(1.0 + exp(0.14705882352941177*(4.36 - x[0]))))) + (1.0 - 1/(1.0 + exp((-40 - x[0])/10.)))/(671.082 + (1.*(-661.082 + 4954.*exp(0.06410256410256411*x[0])))/(1. + exp(2.*(30 + x[0])))))*x[10];

   rop[24] = -0.0196*x[24] + 0.0327*(70. - x[24])*x[12];

   rop[25] = -0.0196*x[25] + 0.0327*(70. - x[25])*x[20];

   rop[2] = alfah*(1.0 - x[2]) - betah*x[2];

   rop[3] = alfaj*(1.0 - x[3]) - betaj*x[3];

   rop[1] = alfam*(1.0 - x[1]) - (0.08*x[1])/exp(0.09090909090909091*x[0]);

// Tanto en rop[19] como en rop[20] lo que tengo que sustituir es 3185.377875*x[20] por  2515.456*x[20]+(pow(KmNao,3)*x[20])/1000

 rop[19] = 0.0001245129935333574*(-3.521739130434783/((1.0 + 0.03412424598643583/exp(0.037680299255765284*x[0]) + 0.1245/exp(0.0037680299255765286*x[0]))*(1.0 + 12./x[19])) - (20.23885161290323*((-2515.456*x[20])/exp(0.024492194516247436*x[0]) + 1.8*exp(0.013188104739517849*x[0])*pow(x[19],3)))/((1.0 + 0.2/exp(0.024492194516247436*x[0]))*(1.0 + 0.027/pow(x[20],3))*(3349.5606000000007*(1.0 + 0.2777777777777778*x[20]) +
2515.456*x[20]+(pow(KmNao,3)*x[20])/1000
+ 3.1*pow(x[19],3) + 9055.641599999999*(1.0 + 0.000537383918356336*pow(x[19],3)))) - 12.*x[2]*x[3]*pow(x[1],3)*(-26.539067357512955*log(136./x[19]) + x[0]));

   rop[11] = (1/(1.0 + exp(0.13333333333333333*(-50. - x[0]))) - x[11])/tauKr;

   rop[13] = ((0.0000719*(30. + x[0]))/(1.0 - exp(-0.148*(30. + x[0]))) + (0.000131*(30. + x[0]))/(-1.0 + exp(0.0687*(30. + x[0]))))*(1/(1.0 + exp(0.059880239520958084*(1.5 - x[0]))) - x[13]);

   rop[14] = (((0.0000719*(30. + x[0]))/(1.0 - exp(-0.148*(30. + x[0]))) + (0.000131*(30. + x[0]))/(-1.0 + exp(0.0687*(30. + x[0]))))*(1/(1.0 + exp(0.059880239520958084*(1.5 - x[0]))) - x[14]))/4.;

rop[17] = (1/(1.0 + exp(0.06666666666666667*(-eq89P1 - x[0]))) - x[17])/(1.5 + 3.5/exp(0.0011111111111111111*pow(x[0],2)));

rop[18] = (1/(1.0 + exp(0.1*(33.5 + x[0]))) - x[18])/(20. + eq92P1/(1.0 + exp(0.1*(33.5 + x[0]))));

rop[15] = (1/(1.0 + exp(0.06666666666666667*(-eq89P1 - x[0]))) - x[15])/(0.5 + 9./(1.0 + exp(0.06666666666666667*(3. + x[0]))));

rop[16] = (1/(1.0 + exp(0.1*(33.5 + x[0]))) - x[16])/(30. + 3000./(1.0 + exp(0.1*(60. + x[0]))));

   rop[26] = (1/(1.0 + exp(0.1*(33.5 + x[0]))) - x[26])/(720. + 2300./(1.0 + exp(0.1*(60. + x[0]))));

rop[20] = (0.0196*x[25] - 0.0327*(70. - x[25])*x[20] + 49.99999999999999*
(-0.25*(-x[12] + x[20]) - 546.*iCa*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]) + x[23] + (0.84*((-2515.456*x[20])/exp(0.024492194516247436*x[0]) +
1.8*exp(0.013188104739517849*x[0])*pow(x[19],3)))/((1.0 + 0.2/exp(0.024492194516247436*x[0]))*(1.0 + 0.027/pow(x[20],3))*(3349.5606000000007*(1.0 + 0.2777777777777778*x[20]) +
2515.456*x[20] +(pow(KmNao,3)*x[20])/1000.+
3.1*pow(x[19],3) + 9055.641599999999*(1.0 + 0.000537383918356336*pow(x[19],3))))))/(1.0 + 4.5/pow(0.3 + x[20],2) + 28.2/pow(0.6 + x[20],2) + 168./pow(7. + x[20],2) + 546./pow(13. + x[20],2) + 1.e6/pow(200. + x[20],2));


rop[12] = (0.0196*x[24] - 0.0327*(70. - x[24])*x[12] - (0.8*pow(x[12],2))/(0.25 + pow(x[12],2)) + (0.000020700000000000002*pow(x[21],2)*(-x[12] + 16.666666666666668*x[21]))/(pow(kj,2) + pow(x[21],2)) + 0.25*(-x[12] + x[20]))/(1.0 + 4.5/pow(0.3 + x[12],2) + 28.2/pow(0.6 + x[12],2) + 168./pow(7. + x[12],2) + 546./pow(13. + x[12],2) + 1.e6/pow(200. + x[12],2));

   rop[21] = (0.8*pow(x[12],2))/(0.25 + pow(x[12],2)) - (0.000020700000000000002*pow(x[21],2)*(-x[12] + 16.666666666666668*x[21]))/(pow(kj,2) + pow(x[21],2)) - x[23];

   rop[22] = 0.01*(x[21] - x[22]);

   rop[23] = (0.03333333333333333*Q*fabs(iCa)*x[21]*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]))/(exp(0.05*(30 + x[0]))*(1.0 + exp(-0.05*(30 + x[0])))) - 0.03333333333333333*x[23]*(1.0 - (30.*rop[21])/x[21]);

   rop[4] = -2.*(x[4] - x[20]) + 9998.6*fabs(iCa)*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]) + (23692.*Q*fabs(iCa)*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]))/(exp(0.346*(30 + x[0]))*(1.0 + exp(-0.346*(30 + x[0]))));

   rop[0] = -Iapp - 8770.169032258067*iCa*(1.0 - x[5] - x[6] - x[8] - x[7] - x[10] - x[9]) - 1.173913043478261/((1.0 + 0.03412424598643583/exp(0.037680299255765284*x[0]) + 0.1245/exp(0.0037680299255765286*x[0]))*(1.0 + 12./x[19])) - (6.746283870967743*((-2515.456*x[20])/exp(0.024492194516247436*x[0]) + 1.8*exp(0.013188104739517849*x[0])*pow(x[19],3)))/((1.0 + 0.2/exp(0.024492194516247436*x[0]))*(1.0 + 0.027/pow(x[20],3))*(3349.5606000000007*(1.0 + 0.2777777777777778*x[20]) + 3185.377875*x[20] + 3.1*pow(x[19],3) + 9055.641599999999*(1.0 + 0.000537383918356336*pow(x[19],3)))) - (0.36719999999999997*(86.39112568993217 + x[0]))/((1.0 + exp(0.2385*(27.176125689932164 + x[0])))*(1.02/(1.0 + exp(0.2385*(27.176125689932164 + x[0]))) + (exp(0.06175*(-507.9188743100678 + x[0])) + 0.49124*exp(0.08032*(91.86712568993217 + x[0])))/(1.0 + exp(-0.5143*(91.14412568993217 + x[0]))))) - 12.*x[2]*x[3]*pow(x[1],3)*(-26.539067357512955*log(136./x[19]) + x[0]) - (0.006*(86.39112568993217 + x[0])*x[11])/(1.0 + exp(0.044642857142857144*(33. + x[0]))) - 0.153*(1.0 + 0.8/(1.0 + 0.125/pow(x[12],3)))*(-26.539067357512955*log(7.89288/(140. + 0.01833*x[19])) + x[0])*x[13]*x[14] - 0.055*(86.39112568993217 + x[0])*x[17]*x[18] - 0.08*(86.39112568993217 + x[0])*x[15]*(0.5*x[26] + x[16]);


	return;
}
